CREATE PROCEDURE CrearNuevoPedido
    @CustomerID NCHAR(5),
    @EmployeeID INT,
    @ProductID INT,
    @Cantidad INT
AS
BEGIN
    BEGIN TRY 
        BEGIN TRANSACTION;

        -- 1. Insertamos un nuevo pedido en Orders
        DECLARE @NuevoOrderID INT;

        INSERT INTO Orders (CustomerID, EmployeeID, OrderDate, RequiredDate, ShipVia, Freight)
        VALUES (@CustomerID, @EmployeeID, GETDATE(), DATEADD(DAY, 7, GETDATE()), 1, 10);

        -- Guardamos el ID generado
        SET @NuevoOrderID = SCOPE_IDENTITY();

        -- 2. Insertamos en Order Details
        INSERT INTO [Order Details] (OrderID, ProductID, UnitPrice, Quantity, Discount)
        SELECT @NuevoOrderID, @ProductID, UnitPrice, @Cantidad, 0
        FROM Products
        WHERE ProductID = @ProductID;

        -- 3. Confirmamos todo
        COMMIT TRANSACTION;
        PRINT 'Pedido creado correctamente.';
    END TRY

    BEGIN CATCH
        -- Si ocurre un error, revertimos
        ROLLBACK TRANSACTION;
        PRINT 'Error: no se pudo crear el pedido.';
    END CATCH
END;


FUNCIONES EN SQL SERVER, con ejemplos
Ejemplo 1: Funci√≥n de agregado

Supongamos que quieres saber el promedio de precio unitario de todos los productos:

SELECT AVG(UnitPrice) AS PrecioPromedio
FROM Products;

Explicaci√≥n
AVG(UnitPrice) ‚Üí es una funci√≥n de agregado que calcula el promedio de la columna UnitPrice.
AS PrecioPromedio ‚Üí le pone un alias al resultado.
FROM Products ‚Üí le decimos que use la tabla de productos.

üî∏ Resultado: Una sola fila con el precio promedio de todos los productos.

Ejemplo 2: Funci√≥n escalar

Ver el nombre de los productos en may√∫sculas:

SELECT UPPER(ProductName) AS NombreMayuscula
FROM Products;

Explicaci√≥n
UPPER(ProductName) ‚Üí convierte el texto de ProductName a may√∫sculas.

Se ejecuta para cada fila.

Devuelve una columna con los nombres en may√∫sculas.

Ejemplo 3: Funci√≥n de ventana (OVER)

Saber el precio promedio por categor√≠a, pero mostrando cada producto tambi√©n:

SELECT 
    ProductName,
    CategoryID,
    UnitPrice,
    AVG(UnitPrice) OVER(PARTITION BY CategoryID) AS PromedioCategoria
FROM Products;

Explicaci√≥n
OVER(PARTITION BY CategoryID) ‚Üí agrupa internamente por categor√≠a.
AVG(UnitPrice) ‚Üí calcula el promedio por grupo.
Pero a diferencia de un GROUP BY, no colapsa las filas ‚Üí sigue mostrando cada producto.

üî∏ Resultado: cada producto aparece con su precio y al lado el promedio de su categor√≠a.

Ejemplo 4: Funci√≥n definida por el usuario (conceptual)

Imagina que quieres calcular la edad de un empleado en base a su BirthDate.
Podr√≠as crear una funci√≥n CalcularEdad() que reciba la fecha de nacimiento y devuelva la edad.

Luego la usar√≠as as√≠:

SELECT FirstName, LastName, dbo.CalcularEdad(BirthDate) AS Edad
FROM Employees;

Explicaci√≥n
dbo.CalcularEdad(BirthDate) ‚Üí funci√≥n que t√∫ mismo creas.

Hace el c√°lculo de a√±os de diferencia entre BirthDate y la fecha actual.

Devuelve un n√∫mero entero (la edad).
